# docker installer - https://docs.docker.com/get-docker/ 
# docker pull imageName:tagName

#check docker
docker system df -v

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Policies\Microsoft\FVE]
"FDVDenyWriteAccess"=dword:00000000

---------------------
# Docker SQL Server
---------------------
docker pull mcr.microsoft.com/mssql/server:2019-latest
docker run --name sql1 -p 1433:1433 -v sqlvolume:/var/opt/mssql -v c:/SQLBackup/:/var/opt/mssql/backup -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=sql!dba123" -e "MSSQL_PID=Developer" -e 'TZ=America/New_York' -d mcr.microsoft.com/mssql/server
docker cp c:\sqlbackup\backupdb.bak <containerId>:/var/opt/mssql/data/   #copy dbbackup like this as well

#second sqlservr instance.  Port is different and sqlvolumeB.  docker volume ls
docker run --name sql2 -p 60500:1433 -v sqlvolumeB:/var/opt/mssql -v c:/SQLBackup/:/var/opt/mssql/backup -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=sql!dba123" -e "MSSQL_PID=Developer" -e 'TZ=America/New_York' -d mcr.microsoft.com/mssql/server

docker stop  sql2
docker start sql1

docker exec -it sql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "sql!dba123"
docker exec -it sql1 sh

# docker images /var/lib/docker is mounted on C:\Users\Public\Documents\Hyper-V\. but needs admin right to browse this dir it seems.
docker volume ls
docker volume inspect volumeName
docker volume create nameOfVolume

#following two commands from powershell
powershell
PS C:\> docker stop $(docker ps -q)
PS C:\> docker rm $(docker ps -a -q) # rm all exited containers

ctrl-p-q to exit from current container and place it in background

---------------------
# Docker Ifx Server
---------------------

docker run -d --name ifx --privileged -p 9088:9088 -p 9089:9089 -p 27017:27017 -p 27018:27018 -p 27883:27883 -e LICENSE=accept -e DB_INIT=1 ibmcom/informix-developer-database:latest
docker start ifx
docker exec -it ifx bash

docker stop ifx
---------------------
# Docker Microsoft IIS
---------------------
docker pull mcr.microsoft.com/windows/servercore/iis:windowsservercore-1909
docker -it --name alpha -d mcr.microsoft.com/windows/servercore/iis:windowsservercore-1909 cmd
---------------------
#Docker Redis Example
---------------------
# first follow instructions at https://docs.docker.com/install/ to install docker

# run a new redis container
docker run -d -p 6379:6379 --name rediscont1 redis

# see that this container is running
docker ps

# view the log output for the container
# (should see "ready to accept connections")
docker logs rediscont1

# see the images we have on our computer
docker image ls

# run an interactive shell
docker exec -it rediscont1 sh

# some commands to try inside the shell:
ls -al # view contents of the container file system
redis-cli # start the redis CLI
ping # should respond with 'pong'
set name mark # set a value in the cache
get name # should respond with 'mark'
incr counter # increment (and create) a new counte
incr counter # increment it again
get counter # should respond with '2'
exit # exit from the redis CLI
exit # exit from the interactive shell

# run a second redis container, linked to the first and open an interactive shell
docker run -it --rm --link rediscont1:redis --name client1 redis sh

# some commands to try inside the shell
redis-cli -h redis # start the redis CLI but connect to the other container
get name # should respond with 'mark'
get counter # should respond with '2'
exit # exit from the redis CLI
exit # exit from the interactive shell

# observe that the second redis container is no longer running
docker ps

# stop the first redis container
docker stop rediscont1

# see all containers, even stopped ones (will only see rediscont1)
docker ps -a

# delete the docker redis container
docker rm rediscont1

# delete the redis image
docker image rm redis	


-------------------------------------
#Docker build
-------------------------------------
#starts building image using dockerfile in current directory
docker build -t imageName:tag .

-------------------------------------
#Docker compose  - orchestrator
-------------------------------------

docker-compose -f docker-sql1.yml up -d
docker-compose -f docker-sql1.yml down
  
.env - this file can contain environment variables that can be referenced in docker-sql1.yml
  SOME_KEY=somevalue

docker-sql1.yml
---------------
version: "3.8"

services:
  sql1:
    image: mcr.microsoft.com/mssql/server
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
      - MSSQL_PID=Developer
      - TZ=America/New_York
    volumes:
      - sqlvolume:/var/opt/mssql
      - c:/SQLBackup/:/var/opt/mssql/backup
volumes:
  sqlvolume:
--------------
   env_file:
     - environmentfile.env  # you can have this under each services (sql1) and remove environment: if needed 
------------------
c:\>docker --help
------------------
Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\supatel\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\supatel\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\supatel\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\supatel\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.
